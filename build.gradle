buildscript {
	ext {
		springBootVersion = '2.1.2.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("net.saliman:gradle-cobertura-plugin:2.6.0")
		classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2")
		classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0")
	}
}

plugins {
	id 'io.franzbecker.gradle-lombok' version '2.0'
	id 'java'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'com.github.kt3k.coveralls'

group = 'com.github.raphaelbluteau'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

apply plugin: 'com.palantir.docker'

task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree(tasks.bootJar.outputs.files.singleFile))
	into("build/dependency")
}

docker {
	name "${project.group}/${bootJar.archiveBaseName.getOrElse('cashback')}"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.squareup.retrofit2:retrofit:2.8.1'
	implementation 'com.squareup.retrofit2:converter-gson:2.8.1'
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	compile 'io.github.resilience4j:resilience4j-spring-boot2:1.4.0'
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'org.springframework.boot:spring-boot-starter-aop'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootRun {
	String activeProfile =  System.properties['spring.profiles.active']
	systemProperty "spring.profiles.active", activeProfile
}

jacocoTestReport {
	reports {
		xml {
			enabled true // coveralls plugin depends on xml format report
		}

		html {
			enabled true
		}
	}

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['**/data/**','**/entity/**', '**/enums/**', '**/config/**', '**/SpotifyGatewayMockImpl**'])
		})
	}
}
